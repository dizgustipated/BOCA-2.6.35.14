{"name":"Boca-2.6.35.14","body":"kernel features include:\r\n\r\n\r\ndeconfigs made for P1000 & P1000L & P1000N CDMA included\r\n\r\n*TINY_SHMEM FILE SYSTEM enabled \r\n*LCD Voltage down to 255000 from 300000 \r\n*Touchscreen Driver Tweaks \r\n*10 point touch\r\n*OC/UV 600mhz, 1.2 & 1.4ghz added\r\n*Set at 1000mhz stock \r\n*voodoo sound v10 \r\n*patched up to 2.6.35.13 (from 2.6.35.7) \r\n*Minimal Undervolt Settings\r\n*large market downloads \r\n*AutoGroup Shed \r\n*CONFIG_NETFILTER_XT_TARGET_LED \r\n*video record has returned once again. - thanks jt1134\r\n*better memory killer\r\n*very flexable undervolting\r\n*lower tab temperature\r\n*\"trickle charge\" (VERY SLOWELY) in car\r\n*Add NTFS support\r\n*Battery Life eXtender (BLX)\r\n(http://forum.xda-developers.com/showthread.php?t=1257497)\r\n*updated wifi scan\r\n*kernel profiling and sha digest\r\n\r\nCPU Govenors\r\n--------------------\r\n\r\nperformance\r\npowersave\r\nuserspace\r\nondemandx\r\nondemand\r\nconservative\r\nsmoothass\r\ngreaselightning\r\nsavagedzen\r\ninteractivex\r\ncpufreq_minmax\r\nsmartass2\r\nscary\r\nlagfree\r\ndarkside\r\ninteractive\r\nLionheart\r\nWheatly\r\nIntellidemand\r\nLULZACTIVE - ported from:http://forum.xda-developers.com/show....php?t=1460327 - thanks af974!\r\n(use recomended (lulzactive located here:https://market.android.com/details?id=com.tegrak.lulzactive)\r\n\r\n\r\nI/O Schedulers\r\n\r\n--------------------\r\n*Fifo I/O Scheduler\r\n*NOOP I/O Scheduler \r\n*CFQ I/O Scheduler\r\n*DEADLINE I/O Scheduler \r\n*V/R I/O Scheduler \r\n*SIO I/O Scheduler\r\n*BFQ-v2 I/O Scheduler\r\n\r\n\" SIO, VR, INTERACTIVEX, SAVEDZEN, GREASEDLIGHTNING, DARKSIDE, ONDEMANDX, SCARY, SMARTASSV2, SUPERBAD, Lionheart, Wheatly & Intellidemand\"\r\nPorted to AOSP/CyanogenMod SGT7 originally by me.\r\n\r\n\r\n--------------------------------------------\r\n============================================\r\n--------------------------------------------\r\n============================================\r\n--------------------------------------------\r\n\r\n\r\n\r\nLinux kernel release 2.6.xx <http://kernel.org/>\r\n\r\nThese are the release notes for Linux version 2.6.  Read them carefully,\r\nas they tell you what this is all about, explain how to install the\r\nkernel, and what to do if something goes wrong. \r\n\r\nWHAT IS LINUX?\r\n\r\n  Linux is a clone of the operating system Unix, written from scratch by\r\n  Linus Torvalds with assistance from a loosely-knit team of hackers across\r\n  the Net. It aims towards POSIX and Single UNIX Specification compliance.\r\n\r\n  It has all the features you would expect in a modern fully-fledged Unix,\r\n  including true multitasking, virtual memory, shared libraries, demand\r\n  loading, shared copy-on-write executables, proper memory management,\r\n  and multistack networking including IPv4 and IPv6.\r\n\r\n  It is distributed under the GNU General Public License - see the\r\n  accompanying COPYING file for more details. \r\n\r\nON WHAT HARDWARE DOES IT RUN?\r\n\r\n  Although originally developed first for 32-bit x86-based PCs (386 or higher),\r\n  today Linux also runs on (at least) the Compaq Alpha AXP, Sun SPARC and\r\n  UltraSPARC, Motorola 68000, PowerPC, PowerPC64, ARM, Hitachi SuperH, Cell,\r\n  IBM S/390, MIPS, HP PA-RISC, Intel IA-64, DEC VAX, AMD x86-64, AXIS CRIS,\r\n  Xtensa, AVR32 and Renesas M32R architectures.\r\n\r\n  Linux is easily portable to most general-purpose 32- or 64-bit architectures\r\n  as long as they have a paged memory management unit (PMMU) and a port of the\r\n  GNU C compiler (gcc) (part of The GNU Compiler Collection, GCC). Linux has\r\n  also been ported to a number of architectures without a PMMU, although\r\n  functionality is then obviously somewhat limited.\r\n  Linux has also been ported to itself. You can now run the kernel as a\r\n  userspace application - this is called UserMode Linux (UML).\r\n\r\nDOCUMENTATION:\r\n\r\n - There is a lot of documentation available both in electronic form on\r\n   the Internet and in books, both Linux-specific and pertaining to\r\n   general UNIX questions.  I'd recommend looking into the documentation\r\n   subdirectories on any Linux FTP site for the LDP (Linux Documentation\r\n   Project) books.  This README is not meant to be documentation on the\r\n   system: there are much better sources available.\r\n\r\n - There are various README files in the Documentation/ subdirectory:\r\n   these typically contain kernel-specific installation notes for some \r\n   drivers for example. See Documentation/00-INDEX for a list of what\r\n   is contained in each file.  Please read the Changes file, as it\r\n   contains information about the problems, which may result by upgrading\r\n   your kernel.\r\n\r\n - The Documentation/DocBook/ subdirectory contains several guides for\r\n   kernel developers and users.  These guides can be rendered in a\r\n   number of formats:  PostScript (.ps), PDF, HTML, & man-pages, among others.\r\n   After installation, \"make psdocs\", \"make pdfdocs\", \"make htmldocs\",\r\n   or \"make mandocs\" will render the documentation in the requested format.\r\n\r\nINSTALLING the kernel source:\r\n\r\n - If you install the full sources, put the kernel tarball in a\r\n   directory where you have permissions (eg. your home directory) and\r\n   unpack it:\r\n\r\n\t\tgzip -cd linux-2.6.XX.tar.gz | tar xvf -\r\n\r\n   or\r\n\t\tbzip2 -dc linux-2.6.XX.tar.bz2 | tar xvf -\r\n\r\n\r\n   Replace \"XX\" with the version number of the latest kernel.\r\n\r\n   Do NOT use the /usr/src/linux area! This area has a (usually\r\n   incomplete) set of kernel headers that are used by the library header\r\n   files.  They should match the library, and not get messed up by\r\n   whatever the kernel-du-jour happens to be.\r\n\r\n - You can also upgrade between 2.6.xx releases by patching.  Patches are\r\n   distributed in the traditional gzip and the newer bzip2 format.  To\r\n   install by patching, get all the newer patch files, enter the\r\n   top level directory of the kernel source (linux-2.6.xx) and execute:\r\n\r\n\t\tgzip -cd ../patch-2.6.xx.gz | patch -p1\r\n\r\n   or\r\n\t\tbzip2 -dc ../patch-2.6.xx.bz2 | patch -p1\r\n\r\n   (repeat xx for all versions bigger than the version of your current\r\n   source tree, _in_order_) and you should be ok.  You may want to remove\r\n   the backup files (xxx~ or xxx.orig), and make sure that there are no\r\n   failed patches (xxx# or xxx.rej). If there are, either you or me has\r\n   made a mistake.\r\n\r\n   Unlike patches for the 2.6.x kernels, patches for the 2.6.x.y kernels\r\n   (also known as the -stable kernels) are not incremental but instead apply\r\n   directly to the base 2.6.x kernel.  Please read\r\n   Documentation/applying-patches.txt for more information.\r\n\r\n   Alternatively, the script patch-kernel can be used to automate this\r\n   process.  It determines the current kernel version and applies any\r\n   patches found.\r\n\r\n\t\tlinux/scripts/patch-kernel linux\r\n\r\n   The first argument in the command above is the location of the\r\n   kernel source.  Patches are applied from the current directory, but\r\n   an alternative directory can be specified as the second argument.\r\n\r\n - If you are upgrading between releases using the stable series patches\r\n   (for example, patch-2.6.xx.y), note that these \"dot-releases\" are\r\n   not incremental and must be applied to the 2.6.xx base tree. For\r\n   example, if your base kernel is 2.6.12 and you want to apply the\r\n   2.6.12.3 patch, you do not and indeed must not first apply the\r\n   2.6.12.1 and 2.6.12.2 patches. Similarly, if you are running kernel\r\n   version 2.6.12.2 and want to jump to 2.6.12.3, you must first\r\n   reverse the 2.6.12.2 patch (that is, patch -R) _before_ applying\r\n   the 2.6.12.3 patch.\r\n   You can read more on this in Documentation/applying-patches.txt\r\n\r\n - Make sure you have no stale .o files and dependencies lying around:\r\n\r\n\t\tcd linux\r\n\t\tmake mrproper\r\n\r\n   You should now have the sources correctly installed.\r\n\r\nSOFTWARE REQUIREMENTS\r\n\r\n   Compiling and running the 2.6.xx kernels requires up-to-date\r\n   versions of various software packages.  Consult\r\n   Documentation/Changes for the minimum version numbers required\r\n   and how to get updates for these packages.  Beware that using\r\n   excessively old versions of these packages can cause indirect\r\n   errors that are very difficult to track down, so don't assume that\r\n   you can just update packages when obvious problems arise during\r\n   build or operation.\r\n\r\nBUILD directory for the kernel:\r\n\r\n   When compiling the kernel all output files will per default be\r\n   stored together with the kernel source code.\r\n   Using the option \"make O=output/dir\" allow you to specify an alternate\r\n   place for the output files (including .config).\r\n   Example:\r\n     kernel source code:\t/usr/src/linux-2.6.N\r\n     build directory:\t\t/home/name/build/kernel\r\n\r\n   To configure and build the kernel use:\r\n   cd /usr/src/linux-2.6.N\r\n   make O=/home/name/build/kernel menuconfig\r\n   make O=/home/name/build/kernel\r\n   sudo make O=/home/name/build/kernel modules_install install\r\n\r\n   Please note: If the 'O=output/dir' option is used then it must be\r\n   used for all invocations of make.\r\n\r\nCONFIGURING the kernel:\r\n\r\n   Do not skip this step even if you are only upgrading one minor\r\n   version.  New configuration options are added in each release, and\r\n   odd problems will turn up if the configuration files are not set up\r\n   as expected.  If you want to carry your existing configuration to a\r\n   new version with minimal work, use \"make oldconfig\", which will\r\n   only ask you for the answers to new questions.\r\n\r\n - Alternate configuration commands are:\r\n\t\"make config\"      Plain text interface.\r\n\t\"make menuconfig\"  Text based color menus, radiolists & dialogs.\r\n\t\"make xconfig\"     X windows (Qt) based configuration tool.\r\n\t\"make gconfig\"     X windows (Gtk) based configuration tool.\r\n\t\"make oldconfig\"   Default all questions based on the contents of\r\n\t\t\t   your existing ./.config file and asking about\r\n\t\t\t   new config symbols.\r\n\t\"make silentoldconfig\"\r\n\t\t\t   Like above, but avoids cluttering the screen\r\n\t\t\t   with questions already answered.\r\n\t\t\t   Additionally updates the dependencies.\r\n\t\"make defconfig\"   Create a ./.config file by using the default\r\n\t\t\t   symbol values from either arch/$ARCH/defconfig\r\n\t\t\t   or arch/$ARCH/configs/${PLATFORM}_defconfig,\r\n\t\t\t   depending on the architecture.\r\n\t\"make ${PLATFORM}_defconfig\"\r\n\t\t\t  Create a ./.config file by using the default\r\n\t\t\t  symbol values from\r\n\t\t\t  arch/$ARCH/configs/${PLATFORM}_defconfig.\r\n\t\t\t  Use \"make help\" to get a list of all available\r\n\t\t\t  platforms of your architecture.\r\n\t\"make allyesconfig\"\r\n\t\t\t   Create a ./.config file by setting symbol\r\n\t\t\t   values to 'y' as much as possible.\r\n\t\"make allmodconfig\"\r\n\t\t\t   Create a ./.config file by setting symbol\r\n\t\t\t   values to 'm' as much as possible.\r\n\t\"make allnoconfig\" Create a ./.config file by setting symbol\r\n\t\t\t   values to 'n' as much as possible.\r\n\t\"make randconfig\"  Create a ./.config file by setting symbol\r\n\t\t\t   values to random values.\r\n\r\n   You can find more information on using the Linux kernel config tools\r\n   in Documentation/kbuild/kconfig.txt.\r\n\r\n\tNOTES on \"make config\":\r\n\t- having unnecessary drivers will make the kernel bigger, and can\r\n\t  under some circumstances lead to problems: probing for a\r\n\t  nonexistent controller card may confuse your other controllers\r\n\t- compiling the kernel with \"Processor type\" set higher than 386\r\n\t  will result in a kernel that does NOT work on a 386.  The\r\n\t  kernel will detect this on bootup, and give up.\r\n\t- A kernel with math-emulation compiled in will still use the\r\n\t  coprocessor if one is present: the math emulation will just\r\n\t  never get used in that case.  The kernel will be slightly larger,\r\n\t  but will work on different machines regardless of whether they\r\n\t  have a math coprocessor or not. \r\n\t- the \"kernel hacking\" configuration details usually result in a\r\n\t  bigger or slower kernel (or both), and can even make the kernel\r\n\t  less stable by configuring some routines to actively try to\r\n\t  break bad code to find kernel problems (kmalloc()).  Thus you\r\n\t  should probably answer 'n' to the questions for\r\n          \"development\", \"experimental\", or \"debugging\" features.\r\n\r\nCOMPILING the kernel:\r\n\r\n - Make sure you have at least gcc 3.2 available.\r\n   For more information, refer to Documentation/Changes.\r\n\r\n   Please note that you can still run a.out user programs with this kernel.\r\n\r\n - Do a \"make\" to create a compressed kernel image. It is also\r\n   possible to do \"make install\" if you have lilo installed to suit the\r\n   kernel makefiles, but you may want to check your particular lilo setup first.\r\n\r\n   To do the actual install you have to be root, but none of the normal\r\n   build should require that. Don't take the name of root in vain.\r\n\r\n - If you configured any of the parts of the kernel as `modules', you\r\n   will also have to do \"make modules_install\".\r\n\r\n - Verbose kernel compile/build output:\r\n\r\n   Normally the kernel build system runs in a fairly quiet mode (but not\r\n   totally silent).  However, sometimes you or other kernel developers need\r\n   to see compile, link, or other commands exactly as they are executed.\r\n   For this, use \"verbose\" build mode.  This is done by inserting\r\n   \"V=1\" in the \"make\" command.  E.g.:\r\n\r\n\tmake V=1 all\r\n\r\n   To have the build system also tell the reason for the rebuild of each\r\n   target, use \"V=2\".  The default is \"V=0\".\r\n\r\n - Keep a backup kernel handy in case something goes wrong.  This is \r\n   especially true for the development releases, since each new release\r\n   contains new code which has not been debugged.  Make sure you keep a\r\n   backup of the modules corresponding to that kernel, as well.  If you\r\n   are installing a new kernel with the same version number as your\r\n   working kernel, make a backup of your modules directory before you\r\n   do a \"make modules_install\".\r\n   Alternatively, before compiling, use the kernel config option\r\n   \"LOCALVERSION\" to append a unique suffix to the regular kernel version.\r\n   LOCALVERSION can be set in the \"General Setup\" menu.\r\n\r\n - In order to boot your new kernel, you'll need to copy the kernel\r\n   image (e.g. .../linux/arch/i386/boot/bzImage after compilation)\r\n   to the place where your regular bootable kernel is found. \r\n\r\n - Booting a kernel directly from a floppy without the assistance of a\r\n   bootloader such as LILO, is no longer supported.\r\n\r\n   If you boot Linux from the hard drive, chances are you use LILO which\r\n   uses the kernel image as specified in the file /etc/lilo.conf.  The\r\n   kernel image file is usually /vmlinuz, /boot/vmlinuz, /bzImage or\r\n   /boot/bzImage.  To use the new kernel, save a copy of the old image\r\n   and copy the new image over the old one.  Then, you MUST RERUN LILO\r\n   to update the loading map!! If you don't, you won't be able to boot\r\n   the new kernel image.\r\n\r\n   Reinstalling LILO is usually a matter of running /sbin/lilo. \r\n   You may wish to edit /etc/lilo.conf to specify an entry for your\r\n   old kernel image (say, /vmlinux.old) in case the new one does not\r\n   work.  See the LILO docs for more information. \r\n\r\n   After reinstalling LILO, you should be all set.  Shutdown the system,\r\n   reboot, and enjoy!\r\n\r\n   If you ever need to change the default root device, video mode,\r\n   ramdisk size, etc.  in the kernel image, use the 'rdev' program (or\r\n   alternatively the LILO boot options when appropriate).  No need to\r\n   recompile the kernel to change these parameters. \r\n\r\n - Reboot with the new kernel and enjoy. \r\n\r\nIF SOMETHING GOES WRONG:\r\n\r\n - If you have problems that seem to be due to kernel bugs, please check\r\n   the file MAINTAINERS to see if there is a particular person associated\r\n   with the part of the kernel that you are having trouble with. If there\r\n   isn't anyone listed there, then the second best thing is to mail\r\n   them to me (torvalds@linux-foundation.org), and possibly to any other\r\n   relevant mailing-list or to the newsgroup.\r\n\r\n - In all bug-reports, *please* tell what kernel you are talking about,\r\n   how to duplicate the problem, and what your setup is (use your common\r\n   sense).  If the problem is new, tell me so, and if the problem is\r\n   old, please try to tell me when you first noticed it.\r\n\r\n - If the bug results in a message like\r\n\r\n\tunable to handle kernel paging request at address C0000010\r\n\tOops: 0002\r\n\tEIP:   0010:XXXXXXXX\r\n\teax: xxxxxxxx   ebx: xxxxxxxx   ecx: xxxxxxxx   edx: xxxxxxxx\r\n\tesi: xxxxxxxx   edi: xxxxxxxx   ebp: xxxxxxxx\r\n\tds: xxxx  es: xxxx  fs: xxxx  gs: xxxx\r\n\tPid: xx, process nr: xx\r\n\txx xx xx xx xx xx xx xx xx xx\r\n\r\n   or similar kernel debugging information on your screen or in your\r\n   system log, please duplicate it *exactly*.  The dump may look\r\n   incomprehensible to you, but it does contain information that may\r\n   help debugging the problem.  The text above the dump is also\r\n   important: it tells something about why the kernel dumped code (in\r\n   the above example it's due to a bad kernel pointer). More information\r\n   on making sense of the dump is in Documentation/oops-tracing.txt\r\n\r\n - If you compiled the kernel with CONFIG_KALLSYMS you can send the dump\r\n   as is, otherwise you will have to use the \"ksymoops\" program to make\r\n   sense of the dump (but compiling with CONFIG_KALLSYMS is usually preferred).\r\n   This utility can be downloaded from\r\n   ftp://ftp.<country>.kernel.org/pub/linux/utils/kernel/ksymoops/ .\r\n   Alternately you can do the dump lookup by hand:\r\n\r\n - In debugging dumps like the above, it helps enormously if you can\r\n   look up what the EIP value means.  The hex value as such doesn't help\r\n   me or anybody else very much: it will depend on your particular\r\n   kernel setup.  What you should do is take the hex value from the EIP\r\n   line (ignore the \"0010:\"), and look it up in the kernel namelist to\r\n   see which kernel function contains the offending address.\r\n\r\n   To find out the kernel function name, you'll need to find the system\r\n   binary associated with the kernel that exhibited the symptom.  This is\r\n   the file 'linux/vmlinux'.  To extract the namelist and match it against\r\n   the EIP from the kernel crash, do:\r\n\r\n\t\tnm vmlinux | sort | less\r\n\r\n   This will give you a list of kernel addresses sorted in ascending\r\n   order, from which it is simple to find the function that contains the\r\n   offending address.  Note that the address given by the kernel\r\n   debugging messages will not necessarily match exactly with the\r\n   function addresses (in fact, that is very unlikely), so you can't\r\n   just 'grep' the list: the list will, however, give you the starting\r\n   point of each kernel function, so by looking for the function that\r\n   has a starting address lower than the one you are searching for but\r\n   is followed by a function with a higher address you will find the one\r\n   you want.  In fact, it may be a good idea to include a bit of\r\n   \"context\" in your problem report, giving a few lines around the\r\n   interesting one. \r\n\r\n   If you for some reason cannot do the above (you have a pre-compiled\r\n   kernel image or similar), telling me as much about your setup as\r\n   possible will help.  Please read the REPORTING-BUGS document for details.\r\n\r\n - Alternately, you can use gdb on a running kernel. (read-only; i.e. you\r\n   cannot change values or set break points.) To do this, first compile the\r\n   kernel with -g; edit arch/i386/Makefile appropriately, then do a \"make\r\n   clean\". You'll also need to enable CONFIG_PROC_FS (via \"make config\").\r\n\r\n   After you've rebooted with the new kernel, do \"gdb vmlinux /proc/kcore\".\r\n   You can now use all the usual gdb commands. The command to look up the\r\n   point where your system crashed is \"l *0xXXXXXXXX\". (Replace the XXXes\r\n   with the EIP value.)\r\n\r\n   gdb'ing a non-running kernel currently fails because gdb (wrongly)\r\n   disregards the starting offset for which the kernel is compiled.","tagline":"BOCA ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}